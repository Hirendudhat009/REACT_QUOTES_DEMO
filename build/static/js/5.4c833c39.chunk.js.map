{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQoutes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","href","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","DUMMY_QUOTES","AllQoutes"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,iFCiB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,mBAAGJ,UAAU,MAAMK,KAAI,kBAAaN,EAAMO,IAA1C,iC,iBC4CSC,EAtCG,SAACR,GACjB,IAZkBS,EAAQC,EAYpBC,EAAUC,cACVC,EAAWC,cAIXC,EAA8C,QAFhC,IAAIC,gBAAgBH,EAASI,QAEbC,IAAI,QAElCC,GAnBYV,EAmBcT,EAAMS,OAnBZC,EAmBoBK,EAlBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAuBxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAVS,WACrBb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAYF,EAAkB,OAAS,UAO3C,kBACQA,EAAkB,YAAc,iBAG1C,oBAAId,UAAWC,IAAQyB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,aCxCjBuB,EAAe,CACjB,CACIvB,GAAI,KACJF,OAAQ,QACRD,KAAM,iBAEV,CACIG,GAAI,KACJF,OAAQ,QACRD,KAAM,mBAaC2B,UATG,WACd,OACI,cAAC,WAAD,UACI,cAAC,EAAD,CAAWtB,OAAQqB","file":"static/js/5.4c833c39.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__27jTV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__1wjH-\",\"sorting\":\"QuoteList_sorting__2pIBn\"};","import classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <a className='btn' href={`/qoutes/${props.id}`}>\n        View Fullscreen\n      </a>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\n\nconst QuoteList = (props) => {\n  const history = useHistory()\n  const location = useLocation()\n\n  const queryParams = new URLSearchParams(location.search)\n\n  const isSortAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending)\n\n  const sortingHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortAscending ? 'desc' : 'asc')}`\n    })\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortingHandler}>\n          Sort {isSortAscending ? 'Decending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Fragment } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\n\r\n\r\nconst DUMMY_QUOTES = [\r\n    {\r\n        id: \"q1\",\r\n        author: \"hiren\",\r\n        text: \"What a qoutes\"\r\n    },\r\n    {\r\n        id: \"q2\",\r\n        author: \"hiren\",\r\n        text: \"Learning react\"\r\n    },\r\n]\r\n\r\nconst AllQoutes = () => {\r\n    return (\r\n        <Fragment>\r\n            <QuoteList quotes={DUMMY_QUOTES} />\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default AllQoutes;"],"sourceRoot":""}